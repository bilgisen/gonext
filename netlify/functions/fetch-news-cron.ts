import { Config } from "@netlify/functions";
import {
  fetchNewsIncremental,
  fetchNewsBatch,
  getSystemStatus,
  ImportResult
} from "../../lib/news/index";
import { PerformanceMonitor } from "../../lib/news/error-handler";

if (process.env.NODE_ENV !== "production") {
  await import("dotenv/config");
}

const DEFAULT_LIMIT = 50;
const DEFAULT_OFFSET = 0;
const DEFAULT_BATCH_SIZE = 50;
const DEFAULT_FORCE = false;

const fetchNewsScheduledFunction = async (_req: Request, context: { next_run?: string }) => {
  console.log("ğŸš€ Scheduled Function Triggered");
  if (context.next_run) {
    console.log("Next run:", context.next_run);
  }

  const limit = parseInt(process.env.FETCH_NEWS_LIMIT || String(DEFAULT_LIMIT), 10);
  const offset = parseInt(process.env.FETCH_NEWS_OFFSET || String(DEFAULT_OFFSET), 10);
  const batchSize = parseInt(process.env.FETCH_NEWS_BATCH_SIZE || String(DEFAULT_BATCH_SIZE), 10);
  const force = process.env.FETCH_NEWS_FORCE === "true" || DEFAULT_FORCE;

  console.log(`ğŸ“Š Options: limit=${limit}, offset=${offset}, batchSize=${batchSize}, force=${force}`);

  try {
    let result: ImportResult | ImportResult[];

    if (batchSize && limit > batchSize) {
      console.log(`ğŸ“¦ Batch processing...`);
      const results = await fetchNewsBatch(limit, batchSize);
      result = results;
    } else {
      console.log(`ğŸ”„ Incremental fetch...`);
      result = await fetchNewsIncremental({ limit, offset, force });
    }

    // 'result' deÄŸiÅŸkenini TypeScript uyarÄ±sÄ±nÄ± Ã¶nlemek ve deÄŸerini loglamak iÃ§in kullanÄ±yoruz.
    console.log("ğŸ“Š Fetch result summary:", result);

    const status = await getSystemStatus();
    console.log(`âœ… API Healthy: ${status.apiHealthy}`);
    console.log(`âœ… DB Connected: ${status.databaseConnected}`);
    console.log(`ğŸ“° Total News: ${status.totalNews}`);

    const metrics = PerformanceMonitor.getMetrics() as Record<string, { count: number; averageTime: number }>;
    for (const [op, m] of Object.entries(metrics)) {
      console.log(`  ${op}: ${m.count} ops, ${Math.round(m.averageTime)}ms avg`);
    }

    // ZamanlanmÄ±ÅŸ fonksiyon olduÄŸu iÃ§in bir yanÄ±t dÃ¶ndÃ¼rmÃ¼yoruz.
    // return { statusCode: 200, body: JSON.stringify(...) }; satÄ±rÄ± kaldÄ±rÄ±ldÄ±.
    // return; // Veya bu satÄ±rÄ± da kaldÄ±rabilirsiniz, fonksiyon zaten burada bitecek ve undefined dÃ¶necek.
  } catch (error) {
    console.error("ğŸ’¥ Scheduled Function Error:", error);
    // Hata durumunda da bir ÅŸey dÃ¶ndÃ¼rmeden fonksiyonu sonlandÄ±rÄ±yoruz.
    // Netlify, hatayÄ± loglayacaktÄ±r.
    // throw error; // Alternatif: HatanÄ±n loglanmasÄ±nÄ± saÄŸlamak iÃ§in fÄ±rlatabilirsiniz.
  }
};

export default fetchNewsScheduledFunction;

export const config: Config = {
  schedule: "0,15,30,45 * * * *",
};